/*! Lightweight Flowbite helpers for Django Flowbite Admin */
(function () {
  var HIDDEN_CLASS = 'hidden';
  var DRAWER_HIDDEN_CLASS = '-translate-x-full';

  function Drawer(element) {
    this.el = element;
  }

  Drawer.prototype.isVisible = function () {
    return !this.el.classList.contains(DRAWER_HIDDEN_CLASS);
  };

  Drawer.prototype.show = function () {
    this.el.classList.remove(DRAWER_HIDDEN_CLASS);
    this.dispatch('show');
  };

  Drawer.prototype.hide = function () {
    this.el.classList.add(DRAWER_HIDDEN_CLASS);
    this.dispatch('hide');
  };

  Drawer.prototype.toggle = function () {
    if (this.isVisible()) {
      this.hide();
    } else {
      this.show();
    }
  };

  Drawer.prototype.dispatch = function (type) {
    if (typeof window.CustomEvent !== 'function') {
      return;
    }
    this.el.dispatchEvent(new CustomEvent(type + '.tw.drawer', { detail: { drawer: this } }));
  };

  function Accordion(container) {
    this.container = container;
    this.triggers = Array.prototype.slice.call(container.querySelectorAll('[data-accordion-target]'));
  }

  Accordion.prototype.init = function () {
    var _this = this;
    this.triggers.forEach(function (trigger) {
      if (trigger.__flowbiteAccordionBound) {
        return;
      }
      trigger.__flowbiteAccordionBound = true;
      var targetSelector = trigger.getAttribute('data-accordion-target');
      if (!targetSelector) {
        return;
      }
      var target = _this.container.querySelector(targetSelector);
      if (!target) {
        return;
      }
      trigger.addEventListener('click', function (event) {
        event.preventDefault();
        var isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        if (isExpanded) {
          trigger.setAttribute('aria-expanded', 'false');
          target.classList.add(HIDDEN_CLASS);
        } else {
          trigger.setAttribute('aria-expanded', 'true');
          target.classList.remove(HIDDEN_CLASS);
        }
      });
    });
  };

  function Dropdown(trigger, menu) {
    this.trigger = trigger;
    this.menu = menu;
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.handleEscape = this.handleEscape.bind(this);
  }

  Dropdown.prototype.isOpen = function () {
    return !this.menu.classList.contains(HIDDEN_CLASS);
  };

  Dropdown.prototype.show = function () {
    this.menu.classList.remove(HIDDEN_CLASS);
    this.trigger.setAttribute('aria-expanded', 'true');
    document.addEventListener('click', this.handleDocumentClick);
    document.addEventListener('keydown', this.handleEscape);
  };

  Dropdown.prototype.hide = function () {
    this.menu.classList.add(HIDDEN_CLASS);
    this.trigger.setAttribute('aria-expanded', 'false');
    document.removeEventListener('click', this.handleDocumentClick);
    document.removeEventListener('keydown', this.handleEscape);
  };

  Dropdown.prototype.toggle = function () {
    if (this.isOpen()) {
      this.hide();
    } else {
      this.show();
    }
  };

  Dropdown.prototype.handleDocumentClick = function (event) {
    if (this.menu.contains(event.target) || this.trigger.contains(event.target)) {
      return;
    }
    this.hide();
  };

  Dropdown.prototype.handleEscape = function (event) {
    if (event.key === 'Escape') {
      this.hide();
    }
  };

  function initDrawers() {
    var drawerInstances = new Map();

    function getDrawerInstance(target) {
      if (!target) {
        return null;
      }
      if (!drawerInstances.has(target)) {
        drawerInstances.set(target, new Drawer(target));
      }
      return drawerInstances.get(target);
    }

    var triggers = document.querySelectorAll('[data-drawer-toggle]');
    triggers.forEach(function (trigger) {
      if (trigger.__flowbiteDrawerBound) {
        return;
      }
      trigger.__flowbiteDrawerBound = true;
      var targetId = trigger.getAttribute('data-drawer-target') || trigger.getAttribute('data-drawer-toggle');
      if (!targetId) {
        return;
      }
      var target = document.getElementById(targetId);
      if (!target) {
        return;
      }
      var instance = getDrawerInstance(target);
      trigger.addEventListener('click', function (event) {
        event.preventDefault();
        instance.toggle();
      });
    });

    var closeTriggers = document.querySelectorAll('[data-drawer-hide]');
    closeTriggers.forEach(function (trigger) {
      if (trigger.__flowbiteDrawerHideBound) {
        return;
      }
      trigger.__flowbiteDrawerHideBound = true;
      var targetId = trigger.getAttribute('data-drawer-hide');
      if (!targetId) {
        return;
      }
      var target = document.getElementById(targetId);
      if (!target) {
        return;
      }
      var instance = getDrawerInstance(target);
      trigger.addEventListener('click', function (event) {
        event.preventDefault();
        instance.hide();
      });
    });

    document.addEventListener('keydown', function (event) {
      if (event.key !== 'Escape') {
        return;
      }
      drawerInstances.forEach(function (instance) {
        if (instance.isVisible()) {
          instance.hide();
        }
      });
    });
  }

  function initAccordions() {
    var containers = document.querySelectorAll('[data-accordion]');
    containers.forEach(function (container) {
      var accordion = new Accordion(container);
      accordion.init();
    });
  }

  function initDropdowns() {
    var triggers = document.querySelectorAll('[data-dropdown-toggle]');
    triggers.forEach(function (trigger) {
      if (trigger.__flowbiteDropdownBound) {
        return;
      }
      trigger.__flowbiteDropdownBound = true;
      var menuId = trigger.getAttribute('data-dropdown-toggle');
      if (!menuId) {
        return;
      }
      var menu = document.getElementById(menuId);
      if (!menu) {
        return;
      }
      var dropdown = new Dropdown(trigger, menu);
      trigger.addEventListener('click', function (event) {
        event.preventDefault();
        dropdown.toggle();
      });
    });
  }

  function initFlowbite() {
    initDrawers();
    initAccordions();
    initDropdowns();
  }

  window.initFlowbite = initFlowbite;
  window.Flowbite = window.Flowbite || {
    Drawer: Drawer,
    Accordion: Accordion,
    Dropdown: Dropdown,
    init: initFlowbite,
  };
})();
